set nocompatible              " be iMproved, required
filetype off                  " required

if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

function! BuildYCM(info)
	" info is a dictionary with 3 fields
	" - name:   name of the plugin
	" - status: 'installed', 'updated', or 'unchanged'
	" - force:  set on PlugInstall! or PlugUpdate!
	if a:info.status == 'installed' || a:info.force
		!./install.py --clang-completer
	endif
endfunction

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdcommenter'
Plug 'haya14busa/incsearch.vim'
Plug 'scrooloose/nerdtree'
Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
Plug 'vim-syntastic/syntastic'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'flazz/vim-colorschemes'
Plug 'morhetz/gruvbox'
Plug 'xolox/vim-colorscheme-switcher'
Plug 'xolox/vim-misc'
Plug 'nvie/vim-flake8'
" Plug 'tmhedberg/SimpylFold' " <zo> - to open a fold, <zc> - to close a fold;
" SimplyFold is VERY slow for big files
call plug#end()

" NERDcommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code
" indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" needed for nerdcommenter plugin
filetype plugin on

" SimpylFold: to see the docstrings for folded code
let g:SimpylFold_docstring_preview=1

" INCsearch
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" replace word
map <S-p> cw<C-r>0<ESC>

" YCM server
let g:ycm_global_ycm_extra_conf = '/usr/share/vim/vimfiles/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" YCM server: for debugging
" let g:ycm_server_keep_logfiles = 1
" let g:ycm_server_log_level = 'debug'

set ignorecase
set smartcase
set showmode
set t_BE=
set hlsearch
set number relativenumber
nnoremap <BS> :nohlsearch<CR><BS>

" hides buffers instead of closing them
set hidden

nnoremap <BS> :nohlsearch<CR><BS>

" keymapping TABS
nnoremap tn :tabnew<Space>
nnoremap tk :tabnext<CR>
nnoremap tj :tabprev<CR>
nnoremap th :tabfirst<CR>
nnoremap tl :tablast<CR>

nnoremap \n :split \| :2winc h<CR>
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

filetype plugin indent on
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab
" history length 
set history=2000
" python_highlight
let python_highlight_all=1
syntax on

" syntastic: fix python conversions
" to set args for syntastis use: syntastic_[filetype]_[subchecker]_args
let g:syntastic_python_checkers=["flake8"]
let g:syntastic_python_flake8_post_args="--max-line-length=120"
let g:syntastic_python_flake8_post_args="--hang-closing"
let g:syntastic_python_flake8_args='--ignore=E111,E114,E124,E125,E127'
let g:syntastic_python_pep8_post_args="--indent_size=2"

" colorscheme, default
set termguicolors
let g:gruvbox_italic=1
colorscheme gruvbox
set background=dark
" YCM server
let g:ycm_server_python_interpreter = "python3"

let s:uname = system("uname -n")
if s:uname == "pclcd30.dyndns.cern.ch\n"
    " colorscheme, option cern
    colorscheme happy_hacking
    " YCM server
    let g:ycm_server_python_interpreter = "python2"
endif
